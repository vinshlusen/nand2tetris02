// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
	// preset x
	// first we zero x
    Not(in = zx, out = notzx);
	Mux16( a = false, b = true, sel = notzx, out = notzx16);
	And16(a = x, b = notzx16, out = px);
	// then we negate x
	Not16(in = px, out = npx);
	Mux16(a = px, b = npx, sel = nx, out = ppx);
	
	// preset y
	// first we zero y
	Not(in = zy, out = notzy);
	Mux16( a = false, b = true, sel = notzy, out = notzy16);
	And16(a = y, b = notzy16, out = py);
	// second we negate y
	Not16(in = py, out = npy);
	Mux16(a = py, b = npy, sel = ny, out = ppy);
	
	// We calculate both Add and And
	Add16(a = ppx, b = ppy, out = outadd);
    And16(a = ppx , b = ppy, out = outand);
	
	// We choose the correct operation according to f
	Mux16( a = outand, b = outadd, sel = f, out = tout);
	
	// process out - we negate it if necessary
	Not16(in = tout, out = nout);
	Mux16(a = tout, b = nout, sel = no, out = ttout, out[0..7] = firstHalf, out[8..15] = secondHalf, out[15] = MSB);
	
	// tout is the result of the opeartion
	// nout is the negative of the result
	// ttout is final result (after it was negated or not).
	
	// see whether the out is zero or not
	Or8Way(in = firstHalf, out = nzr1);
	Or8Way(in = secondHalf, out = nzr2);
	Or(a = nzr1, b = nzr2, out = nzr);
	Not( in = nzr, out = zr);
	
	// see whether the out is negative or not
	// if the biggest bit (MSB) == 1 then ng = 1
	// if the biggest bit (MSB) == 1 then ng = 0
	// In short = ng = MSB
	And( a = MSB, b = true, out = ng);
	
	// we output ttout to out
	And16(a = ttout, b = true, out = out);
}